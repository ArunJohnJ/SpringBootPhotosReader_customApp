
# Okta specific OAuth 2 related properties 

spring.security.oauth2.client.registration.okta.client-name=myalbum
spring.security.oauth2.client.registration.okta.client-id=<PLACE OKTA CLIENT ID HERE>
spring.security.oauth2.client.registration.okta.client-secret=<PLACE OKTA CLIENT SECRET HERE>
spring.security.oauth2.client.registration.okta.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.okta.scope=openid,profile,email,photolibrary.read

# You need to set the issuer correctly. It will look like https://dev-<SOME_NUMBER>.okta.com/oauth2/default
okta.issuer.uri=<PLACE OKTA ISSUER URL HERE FROM OKTA CONSOLE>

spring.security.oauth2.client.provider.okta.authorization-uri: ${okta.issuer.uri}/v1/authorize
spring.security.oauth2.client.provider.okta.token-uri: ${okta.issuer.uri}/v1/token
spring.security.oauth2.client.provider.okta.user-info-uri: ${okta.issuer.uri}/v1/userinfo
spring.security.oauth2.client.provider.okta.jwk-set-uri: ${okta.issuer.uri}/v1/keys

# You need to make sure this Resource API is running locally at port 8081
photolibrary.resource.uri=http://localhost:8081

photolibrary.authorizer=Okta
photolibrary.albums.uri=${photolibrary.resource.uri}/fakealbums/albums
photolibrary.photos.uri=${photolibrary.resource.uri}/fakealbums/mediaItems
photolibrary.logout.url=${okta.issuer.uri}/v1/logout
